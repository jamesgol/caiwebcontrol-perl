#fermcontroller.plc version 0.01
#Written by: James Golovich <james@gnuinter.net>

# TODO
# Add config flags.  FV specific: heat only, cool only, both
# Don't open cool solenoids unless return temp is under current temp



#OP1 FV1HEATOP
#OP2 FV2HEATOP
#OP3 GLYCOLPUMPOP
#OP4 hooked to AC plug for future use
#OP5 GLYCOLCOOLOP When ON AC thinks the temp is 90, when OFF the AC thinks the temp is 60
#OP6 FV2COOLOP
#OP7 FV1COOLOP
#OP8 hooked to solenoid for future use

#UROM1 FV1SETVAR
#UROM2 FV2SETVAR
#UROM3 GLYCOLSETVAR
#UROM4

#VAR1 DEBUGVAR1
#VAR2 GLYCOLCOOLSTARTTIME Time when glycol cooler was started
#VAR3 FV1TEMP
#VAR4 FV2TEMP
#VAR5 FV1STEPVAR
#VAR6 FV2STEPVAR
#VAR7 STEPVAR
#VAR8 STARTUPTIME

#RAM1 FV1SETOLDVAR Used for detecting when FV1SETVAR has changed
#RAM2 FV2SETOLDVAR Used for detecting when FV2SETVAR has changed
#RAM3 LASTALERTTIME
#RAM4 GLYCOLPUMPSTOPTIME CTS when pump should stop
#RAM5 TEMPVAR1 Used for calculations
#RAM6 TEMPVAR2 Used for calculations
#RAM7 SUBPARAM1 Used for passing variable to subroutines (always try to initialize to value when you need it and set to 0 when done with it)
#RAM8 RETVAR1 Used for passing variable from subroutines

#T1 FV1UPPERTEMP
#T2 FV1LOWERTEMP
#T3 FV2UPPERTEMP
#T4 FV2LOWERTEMP
#T5 GLYCOLTEMP 28FF403B0200
#T6 GLYCOLRETURNTEMP 2892774A0200
#T7 ROOMTEMP 2848694A0200 temp probe in garage
#T8 

$ROOMTEMP = T7
$ROOMTEMPSTATE = TS7



#IP8 is hardwired to switch on control box (override everything)
$OVERRIDESWITCH = IP8

#INC is incubator that heats only
$INCSETVAR = UROM4
$INCTEMP = T7
$INCTEMPSTATE = TS7
$INCHEATOP = OP4

$FV1SETVAR = UROM1
$FV1SETOLDVAR = RAM1
$FV1TEMP = VAR3
$FV1UPPERTEMP = T1
$FV1LOWERTEMP = T2
$FV1UPPERTEMPSTATE = TS1
$FV1LOWERTEMPSTATE = TS2
$FV1STEPVAR = VAR5
$FV1HEATOP = OP1
$FV1COOLOP = OP7

$FV2SETVAR = UROM2
$FV2SETOLDVAR = RAM2
$FV2TEMP = VAR4
$FV2UPPERTEMP = T3
$FV2LOWERTEMP = T4
$FV2UPPERTEMPSTATE = TS3
$FV2LOWERTEMPSTATE = TS4
$FV2STEPVAR = VAR6
$FV2HEATOP = OP2
$FV2COOLOP = OP6

$GLYCOLSETVAR = UROM3
$GLYCOLTEMP = T5
$GLYCOLTEMPSTATE = TS5
$GLYCOLRETURNTEMP = T6
$GLYCOLRETURNTEMPSTATE = TS6
$GLYCOLPUMPOP = OP3
$GLYCOLCOOLOP = OP5
$GLYCOLCOOLDIFF = 25  # tenths of degrees differential for glycol cooling
$GLYCOLCOOLSTARTTIME = VAR2
# Below features unimplemented
$GLYCOLCOOLMAXTIME = 60 # in seconds, how long the glycol chiller can run
$GLYCOLCOOLINTERVAL = 10 # multiplier of $GLYCOLCOOLMAXTIME for minimum time between cool cycles

$GLYCOLPUMPSTOPTIME = RAM4	# CTS when pump should stop
$GLYCOLPUMPCYCLEINTERVAL = 14400	# in seconds, run glycol pump at least this often
$GLYCOLPUMPCYCLETIME = 30	# in seconds, how long pump should run after it is needed

$HEATDIFF = 10
$HEATSTEPDEG = 1  #tenths of degrees
$HEATSTEPTIME = 360000  # in milliseconds

$COOLDIFF = 5
$COOLSTEPDEG = 1  # tenths of degrees
$COOLSTEPTIME = 360000 # in millseconds

$FVDISABLED = 54321  # If set temp is this then a FV is considered disabled
$STEPVAR = VAR7  # User can set this to enable stepping of temps
$STEPDISABLED = 0 # Step disabled
$STEPENABLED = 1 # Step for heat and cool
$STEPCOOLONLY = 2 # Step for only cool  (TODO)
$STEPHEATONLY = 3 # Step for only heat  (TODO)

$TEMPVAR1 = RAM5
$TEMPVAR2 = RAM6
$SUBPARAM1 = RAM7
$RETVAR1 = RAM8
$DEBUGVAR1 = VAR1
$STARTUPTIME = VAR8

$LASTALERTTIME = RAM3
$ALERTINTERVAL = 600	# Wait this many seconds between sending alerts


START

	TSTEQ $OVERRIDESWITCH 1 	# If $OVERRIDESWITCH is open
	GOTO CLRALL
	CZ $STARTUPTIME STARTUP		# If $STARTUPTIME is 0 then system rebooted
	CALLSUB AVGTEMPS	# Generate average variables
	# Check if override switch is set
	CALLSUB CHKGLYCOL
	CALLSUB CHKFV1
	CALLSUB CHKFV2
	CALLSUB CHKINC
	CALLSUB CHKPUMP
	END    

CLRALL:
	SET OP1 0
	SET OP2 0
	SET OP3 0
	SET OP4 0
	SET OP5 0
	SET OP6 0
	SET OP7 0
	SET OP8 0
	GOTO START
	RET

AVGTEMPS:
	#Disable averaging for now
	SET $FV1TEMP $FV1UPPERTEMP
	SET $FV2TEMP $FV2UPPERTEMP



	# Average $FV1UPPERTEMP and $FV1LOWERTEMP
#	ADD $FV1UPPERTEMP $FV1LOWERTEMP $TEMPVAR1
#	ADD $FV1UPPERTEMP $TEMPVAR1 $TEMPVAR1
#	ADD $FV1UPPERTEMP $TEMPVAR1 $TEMPVAR1
#	DIV $TEMPVAR1 4 $FV1TEMP

#	SET $DEBUGVAR1 $FV1TEMP		# Set DEBUGVAR1 for testing

	# Average $FV2UPPERTEMP and $FV2LOWERTEMP
#	ADD $FV2UPPERTEMP $FV2LOWERTEMP $TEMPVAR1
#	ADD $FV2UPPERTEMP $TEMPVAR1 $TEMPVAR1
#	ADD $FV2UPPERTEMP $TEMPVAR1 $TEMPVAR1
#	DIV $TEMPVAR1 4 $FV2TEMP
#	SET $DEBUGVAR1 $FV2TEMP		# Set DEBUGVAR1 for testing

	RET
	

CHKPUMP:
	ADD $FV1COOLOP $FV2COOLOP $TEMPVAR1
#	ADD $TEMPVAR1 $PUMPSWITCH $TEMPVAR1
	ADD $TEMPVAR1 $GLYCOLCOOLOP $TEMPVAR1

	SUB CTS $GLYCOLPUMPCYCLEINTERVAL $TEMPVAR2
	TSTGT $TEMPVAR2 $GLYCOLPUMPSTOPTIME
	INC $TEMPVAR1

#$GLYCOLPUMPSTOPTIME = RAM4	# CTS when pump should stop
#$GLYCOLPUMPCYCLEINTERVAL = 1800	# in seconds, run glycol pump at least this often
#$GLYCOLPUMPCYCLETIME = 60	# in seconds, how long pump should run after it is needed

#	TSTGE $TEMPVAR1 1
#	ADD $DEBUGVAR1 $TEMPVAR1 $DEBUGVAR1

	TSTGE $TEMPVAR1 1 
	SET $GLYCOLPUMPOP 1

	TSTGE $TEMPVAR1 1
	ADD CTS $GLYCOLPUMPCYCLETIME $GLYCOLPUMPSTOPTIME

	TSTGT CTS $GLYCOLPUMPSTOPTIME
	SET $GLYCOLPUMPOP 0

	RET


STARTUP:
	SET $SUBPARAM1 EM3		# Set param to EM3 which is "System Rebooted" message

	DELAY 5000			# Delay on startup to hopefully let NTP sync
	SET $STARTUPTIME CTS
	SET $GLYCOLPUMPSTOPTIME CTS	# Initialize $GLYOLPUMPSTOPTIME to now
	CALLSUB ALERT

	SET $SUBPARAM1 0		# Unset $SUBPARAM1
RET

ALERT:

	TSTEQ $SUBPARAM1 0
	SET $SUBPARAM1 EM1		# If $SUBPARAM1 is unset, default to EM1 "general alert"

	SUB CTS $LASTALERTTIME $TEMPVAR1
	TSTGE $TEMPVAR1 $ALERTINTERVAL
	CALLSUB SENDALERT

RET

SENDALERT:
	SET $LASTALERTTIME CTS
	EMAIL $SUBPARAM1
RET

CHKINC:
	TSTEQ $INCSETVAR $FVDISABLED
	GOTO CLRINC

	SUB $INCSETVAR $HEATDIFF $TEMPVAR1
	TSTLE $INCTEMP $TEMPVAR1
	SET $INCHEATOP 1		# Heat on

	TSTGE $INCTEMP $INCSETVAR
	SET $INCHEATOP 0		# Heat off

#	TSTLT $INCTEMP $INCSETVAR $INCHEATOP 
RET

CLRINC:
	SET $INCHEATOP 0
RET
	
CHKFV1:
	TSTEQ $FV1SETVAR $FVDISABLED	# If FV is set to disabled, GOTO CLRFV1 which will then return to main
	GOTO CLRFV1

	SET $SUBPARAM1 EM2		# Set $SUBPARAM to EM2 which is "bad sensor" email
	CZ $FV1UPPERTEMPSTATE ALERT		# If temp sensor state is 0 (bad sensor) send alert

	BZ $FV1UPPERTEMPSTATE CLRFV1		# If temp sensor state is 0 (bad sensor) stop controlling

# buggy?
#	BZ $FV1UPPERTEMP CLRFV1			# If temp sensor is returning 0 degrees stop controlling

	TSTEQ $FV1UPPERTEMP 0			# Return if temp sensor is returning 0 degrees
	RET

	TSTEQ $FV1UPPERTEMPSTATE 0		# Return if temp sensor is 0 (bad sensor)
	RET

	TSTNE $FV1SETVAR $FV1SETOLDVAR
	CALLSUB CHGSETFV1   

	CALLSUB SETFV1

#	ADD $FV1STEPVAR $COOLDIFF $TEMPVAR1 
#	TSTGT $FV1TEMP $TEMPVAR1 $FV1COOLOP
#	NOP    

#	SUB $FV1STEPVAR $HEATDIFF $TEMPVAR1 
#	TSTLT $FV1TEMP $TEMPVAR1 $FV1HEATOP 
#	NOP    
	ADD $FV1STEPVAR $COOLDIFF $TEMPVAR1
	TSTGT $FV1TEMP $TEMPVAR1
	SET $FV1COOLOP 1		# Cool on

	TSTLE $FV1TEMP $FV1STEPVAR
	SET $FV1COOLOP 0		# Cool off

	SUB $FV1STEPVAR $HEATDIFF $TEMPVAR1
	TSTLE $FV1TEMP $TEMPVAR1
	SET $FV1HEATOP 1		# Heat on

	TSTGE $FV1TEMP $FV1STEPVAR
	SET $FV1HEATOP 0		# Heat off

	SET $SUBPARAM1 0		# Unset $SUBPARAM1
RET    

CLRFV1:
	SET $DEBUGVAR1 4444
	SET $FV1COOLOP 0
	SET $FV1HEATOP 0
	SET $FV1SETOLDVAR 0
	SET $FV1STEPVAR 0
	RET


CHGSETFV1:
	SET $FV1STEPVAR $FV1SETVAR  
	SET $FV1SETOLDVAR $FV1SETVAR 
	RET    

SETFV1:
	TSTLE $FV1STEPVAR 0  
	SET $FV1STEPVAR $FV1TEMP 

	TSTEQ $FV1SETVAR $FV1STEPVAR  
	SET $FV1STEPVAR $FV1TEMP  

	TSTEQ $FV1TEMP $FV1SETVAR  
	SET $FV1STEPVAR $FV1TEMP  

	TSTGE $STEPVAR $STEPENABLED
	CALLSUB STEPFV1

	TSTEQ $STEPVAR $STEPDISABLED
	SET $FV1STEPVAR $FV1SETVAR
	
	RET    

STEPFV1:
	SUB $FV1TEMP $COOLDIFF $TEMPVAR1 
	TSTLT $FV1SETVAR $TEMPVAR1  
	SUB $FV1STEPVAR[$COOLSTEPTIME] $COOLSTEPDEG $FV1STEPVAR 

	ADD $FV1TEMP $HEATDIFF $TEMPVAR1 
	TSTGT $FV1SETVAR $TEMPVAR1  
	ADD $FV1STEPVAR[$HEATSTEPTIME] $HEATSTEPDEG $FV1STEPVAR 
	RET

CHKFV2:
	TSTEQ $FV2SETVAR $FVDISABLED	# If FV is set to disabled, GOTO CLRFV2 which will then return to main
	GOTO CLRFV2

	SET $SUBPARAM1 EM2		# Set $SUBPARAM to EM2 which is "bad sensor" email
	CZ $FV2UPPERTEMPSTATE ALERT		# If temp sensor state is 0 (bad sensor) send alert

	BZ $FV2UPPERTEMPSTATE CLRFV2		# If temp sensor state is 0 (bad sensor) stop controlling

	BZ $FV2UPPERTEMP CLRFV2			# If temp sensor is returning 0 degrees stop controlling

	TSTEQ $FV2UPPERTEMP 0			# Return if temp sensor is returning 0 degrees
	RET

	TSTEQ $FV2UPPERTEMPSTATE 0		# Return if temp sensor is 0 (bad sensor)
	RET

	TSTNE $FV2SETVAR $FV2SETOLDVAR
	CALLSUB CHGSETFV2

	CALLSUB SETFV2

	ADD $FV2STEPVAR $COOLDIFF $TEMPVAR1
	TSTGT $FV2TEMP $TEMPVAR1
	SET $FV2COOLOP 1		# Cool on

	TSTLE $FV2TEMP $FV2STEPVAR
	SET $FV2COOLOP 0		# Cool off

	SUB $FV2STEPVAR $HEATDIFF $TEMPVAR1
	TSTLE $FV2TEMP $TEMPVAR1
	SET $FV2HEATOP 1		# Heat on

	TSTGE $FV2TEMP $FV2STEPVAR
	SET $FV2HEATOP 0		# Heat off

	SET $SUBPARAM1 0		# Unset $SUBPARAM1
RET    

CLRFV2:
	SET $FV2COOLOP 0
	SET $FV2HEATOP 0
	SET $FV2SETOLDVAR 0
	SET $FV2STEPVAR 0
	RET


CHGSETFV2:
	SET $FV2STEPVAR $FV2SETVAR  
	SET $FV2SETOLDVAR $FV2SETVAR 
	RET    

SETFV2:
	TSTLE $FV2STEPVAR 0  
	SET $FV2STEPVAR $FV2TEMP 

	TSTEQ $FV2SETVAR $FV2STEPVAR  
	SET $FV2STEPVAR $FV2TEMP  

	TSTEQ $FV2TEMP $FV2SETVAR  
	SET $FV2STEPVAR $FV2TEMP  

	TSTGE $STEPVAR $STEPENABLED
	CALLSUB STEPFV2

	TSTEQ $STEPVAR $STEPDISABLED
	SET $FV2STEPVAR $FV2SETVAR

	RET    

STEPFV2:
	SUB $FV2TEMP $COOLDIFF $TEMPVAR1 
	TSTLT $FV2SETVAR $TEMPVAR1  
	SUB $FV2STEPVAR[$COOLSTEPTIME] $COOLSTEPDEG $FV2STEPVAR 

	ADD $FV2TEMP $HEATDIFF $TEMPVAR1 
	TSTGT $FV2SETVAR $TEMPVAR1  
	ADD $FV2STEPVAR[$HEATSTEPTIME] $HEATSTEPDEG $FV2STEPVAR 
	RET

CHKGLYCOL:
	SET $SUBPARAM1 EM2			# Set param to EM2 which is "bad sensor" message

	CZ $GLYCOLTEMPSTATE ALERT		# If temp sensor state is 0 (bad sensor) send alert

	BZ $GLYCOLTEMPSTATE CLRGLYCOL		# If temp sensor state is 0 (bad sensor) stop controlling

#	CZ $GLYCOLRETURNTEMPSTATE ALERT		# If glycol return sensor is 0 (bad sensor) then alert, but don't stop controlling

	TSTEQ $GLYCOLSETVAR $FVDISABLED
	GOTO CLRGLYCOL

	#TODO When seconds since epoch is available check last time 
	#compressor was run so we dont run too often

	#We never step glycol, but we do use differential to set temp
	ADD $GLYCOLSETVAR $GLYCOLCOOLDIFF $TEMPVAR1 
	TSTGT $GLYCOLTEMP $TEMPVAR1
	SET $GLYCOLCOOLOP 1		# Cool on

	TSTLE $GLYCOLTEMP $GLYCOLSETVAR
	SET $GLYCOLCOOLOP 0		# Cool off

	SET $SUBPARAM1 0			# Unset $SUBPARAM1	
	RET


CLRGLYCOL:
	SET $GLYCOLCOOLOP 0
RET
